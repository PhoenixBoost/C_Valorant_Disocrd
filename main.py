import discord
import requests
import os
import time
from discord.ext import commands
from discord import app_commands
from dotenv import load_dotenv
from ratelimit import limits, sleep_and_retry
import logging
from My_Server import server_on

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(level=logging.INFO)

# ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env
load_dotenv()

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
VALORANT_API_KEY = 'HDEV-e61177df-cdeb-4f6f-b0ee-994655183179'  # ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ API Key ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
REGION = 'ap'  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ region ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô 'ap', 'na', 'eu' ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏ö‡∏≠‡∏ó
intents = discord.Intents.default()
intents.message_content = True  # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
bot = commands.Bot(command_prefix='!', intents=intents)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠
ONE_MINUTE = 60
MAX_CALLS_PER_MINUTE = 30

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
@sleep_and_retry
@limits(calls=MAX_CALLS_PER_MINUTE, period=ONE_MINUTE)
def get_player_stats(region, name, tag):
    url = f"https://api.henrikdev.xyz/valorant/v1/account/{name}/{tag}"
    headers = {
        'Authorization': VALORANT_API_KEY
    }
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()  # Raise an exception for 4xx/5xx errors
    except requests.exceptions.HTTPError as errh:
        logging.error(f"HTTP Error: {errh}")
        return None
    except requests.exceptions.RequestException as err:
        logging.error(f"Request Error: {err}")
        return None
    
    if response.status_code == 429:
        retry_after = int(response.headers.get('Retry-After', 60))
        logging.info(f"Rate limit exceeded. Retrying after {retry_after} seconds.")
        time.sleep(retry_after)
        return get_player_stats(region, name, tag)
    
    if response.status_code == 200:
        data = response.json().get('data')
        if data:
            return {
                'puuid': data.get('puuid'),
                'region': data.get('region'),
                'account_level': data.get('account_level'),
                'name': data.get('name'),
                'tag': data.get('tag'),
                'card': data.get('card'),
                'last_update': data.get('last_update'),
                'last_update_raw': data.get('last_update_raw')
            }
    else:
        logging.error(f"Error {response.status_code}: {response.text}")
    return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MMR ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
@sleep_and_retry
@limits(calls=MAX_CALLS_PER_MINUTE, period=ONE_MINUTE)
def get_player_mmr(region, name, tag):
    url = f"https://api.henrikdev.xyz/valorant/v2/mmr/{region}/{name}/{tag}"
    headers = {
        'Authorization': VALORANT_API_KEY
    }
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
    except requests.exceptions.HTTPError as errh:
        logging.error(f"HTTP Error: {errh}")
        return None
    except requests.exceptions.RequestException as err:
        logging.error(f"Request Error: {err}")
        return None
    
    if response.status_code == 200:
        data = response.json().get('data')
        if data:
            return {
                'current_tier': data.get('current_data', {}).get('currenttierpatched'),
                'elo': data.get('current_data', {}).get('elo'),
                'highest_rank': data.get('highest_rank', {}).get('patched_tier'),
            }
    else:
        logging.error(f"Error {response.status_code}: {response.text}")
    return None

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á slash command ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
@bot.tree.command(name='valo', description='‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô VALORANT')
async def valo(interaction: discord.Interaction, name: str, tag: str):
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    allowed_role_id = 1306502186783473707  # ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    user_roles = [role.id for role in interaction.user.roles]  # ‡∏î‡∏∂‡∏á ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if allowed_role_id not in user_roles:
        await interaction.response.send_message("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ. üö´", ephemeral=True)
        return
    
    # ‡πÉ‡∏ä‡πâ defer() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å Discord ‡∏ß‡πà‡∏≤‡∏ö‡∏≠‡∏ó‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    await interaction.response.defer(ephemeral=True)

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô get_player_stats ‡πÅ‡∏•‡∏∞ get_player_mmr ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
    stats = await bot.loop.run_in_executor(None, get_player_stats, REGION, name, tag)
    mmr = await bot.loop.run_in_executor(None, get_player_mmr, REGION, name, tag)

    if stats and mmr:
        embed = discord.Embed(
            title=f"üéÆ {stats['name']}#{stats['tag']} üèÜ",  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠
            description=f"**Account Level:** {stats['account_level']} üíØ\n**Region:** {stats['region']} üåç\n**Last Update:** {stats['last_update']} ‚è±Ô∏è",
            color=discord.Color.blue()  # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö
        )
        
        embed.set_thumbnail(url=stats['card']['small'])  # ‡πÉ‡∏ä‡πâ Small Card ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
        embed.set_footer(text="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Valorant API üî•")  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á Embed ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ
        embed.add_field(name="PUUID üîë", value=stats['puuid'], inline=False)
        embed.add_field(name="Current Tier ü•á", value=mmr['current_tier'], inline=True)
        embed.add_field(name="ELO üíé", value=mmr['elo'], inline=True)
        embed.add_field(name="Highest Rank üîù", value=mmr['highest_rank'], inline=False)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° Icon ‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
        embed.set_author(name=f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á {stats['name']}#{stats['tag']} üéØ", icon_url="https://upload.wikimedia.org/wikipedia/commons/e/e2/Valorant_Logo.svg")

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Embed
        embed.set_image(url="https://upload.wikimedia.org/wikipedia/commons/e/e2/Valorant_Logo.svg")  # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà URL ‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á Tracker.gg
        view = discord.ui.View()
        view.add_item(discord.ui.Button(label="‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏° üîç", style=discord.ButtonStyle.link, url=f"https://vtl.lol/id/{stats['puuid']}"))

        # ‡∏™‡πà‡∏á embed ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ
        await interaction.followup.send(embed=embed, view=view)  # ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô embed ‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏´‡πá‡∏ô
    else:
        await interaction.followup.send(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {name}#{tag}. ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á. ‚ùå")

# ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
@bot.event
async def on_ready():
    print(f'‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏õ‡πá‡∏ô {bot.user}')
    print('------')
    # ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏±‡∏ö Discord
    await bot.tree.sync()

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏≠‡∏ó‡∏î‡πâ‡∏ß‡∏¢ token ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
server_on()
bot.run(os.getenv('TOKEN'))
